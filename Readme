# Project 1 README

## Authors:
Leonardo Celi (lgc59)
Ammar Ghauri (amg610)

## Design Notes:
Description of mymalloc.c library
---------------------------------
Header Definitions:
Our libary, mymalloc.c, begins with standard C library includes (stdio.h, stdlib.h, unistd.h, string.h) and includes a custom header file mymalloc.h. Preprocessor directives define constants such as MEMSIZE, HEADERSIZE, OBJECTS, OBJSIZE, and MEMLENGTH to manage memory allocation parameters. Additionally, a static array memory of type double serves as the memory pool for dynamic allocation.

Data Structures:
A chunkNode struct was used to define and represent metadata associated with each memory chunk. It contains two fields: size, indicating the size of the payload of the chunk, and allocated, indicating whether the chunk is in use or free. These fields are stored as two integer variables, making the chunkNode structure or the header/metadata exactly 8 bytes.

Memory Initialization:
The initializeMemory() function sets up the initial state of the memory pool. It initializes the first chunk with the total memory size minus the header size and marks it as free. This function is called only once, during the first call to mymalloc. 

Memory Allocation (mymalloc()):
The mymalloc() function that was coded is responsible for allocating memory of the requested size. It performs the following steps:
  	- Checks if the requested size is zero and returns NULL if so.
  	- Initializes the memory array if it hasn't been previously initialized.
  	- Rounds up the requested size to the nearest multiple of 8 for alignment.
  	- Iterates through the memory pool to find a suitable free chunk of memory.
  	- If a suitable chunk is found, marks it as allocated and returns a pointer to the payload.
  	- Implements splitting of large chunks to avoid fragmentation.

Memory Deallocation (myfree()):
The myfree() function deallocates memory previously allocated by mymalloc(). Key features include:
	- Checks if the pointer provided is NULL and returns without performing any actions.
	- Validates that the pointer points to a valid memory chunk allocated by mymalloc().		
	- Marks the corresponding memory block as free and updates metadata accordingly
	- Implements coalescing of adjacent free chunks to prevent memory fragmentation.
	- Error Handling
	- Both mymalloc() and myfree() functions incorporate error handling mechanisms to detect and report common usage errors. They utilize the __FILE__ and __LINE__ macros to capture source file names and line numbers for error reporting.

Design Rationale
-----------------
Memory Organization:
The use of a static array (memory) provides a private fixed-size memory pool for allocation. We believe that this ensures deterministic behavior and simplified management. Each chunk is associated with metadata (header) to track its size and allocation status which allows efficient memory management.

Allocation Strategy:
mymalloc() employs a first-fit allocation strategy, iterating through the memory pool to find the first suitable free chunk of memory. This approach balances simplicity and efficiency, accommodating varying allocation sizes while minimizing fragmentation.

Alignment and Size Considerations:
To ensure memory alignment and accommodate small allocations, mymalloc() rounds up the requested size to the nearest multiple of 8. Additionally, it enforces a minimum chunk size of 16 bytes to accommodate both metadata and payload, optimizing memory usage.

Error Detection and Reporting:
The implementation incorporates robust error detection mechanisms to identify common usage errors, such as double frees or invalid memory accesses. By leveraging preprocessor macros for file and line number tracking, it provides informative error messages for debugging and troubleshooting.

Testing
----------
Elapsed time testing of malloc and free functions (memgrind.c):
Our memgrind.c program tests the functionality, robustness, and the efficiency of our code by randomly choosing between allocating and deallocating 1-byte objects. This is done until 120 objects have been allocated. However, during the first 50 iterations of allocations, the program will record the time it takes our malloc function to allocate a 1-byte object, and then return to the memgrind.c program to execute the next instruction. Similarly, during the first 50 iterations of deallocations, the program will record the time it takes our free function to deallocate a previously allocated 1-byte object, and then return to the memgrind.c program to execut the next instruction. As noted through comments inside of our memgrind.c program, it is possible that the number of deallocations that occurs never reaches 50, since the program is designed to randomly choose between allocating and deallocating. However, the number of allocations will reach 50, because the code is designed to continue until 120 allocations have been completed. Through a number of trials however, we've determined that the number of deallocations did reach into the 40's essentially every time, and sometimes 50's. Therefore, we figured, with regard to accuracy, that it would be sufficient to record the average of however many times the free function runs rather than 50, as the number may not be 50, but will more than likely be very close, if not 50. After determining the averages of the elapsed time for the mymalloc and myfree functions to complete an allocation/deallocation, the memgrind.c program will free any remaining allocated objects in the heap using again our myfree function.

Additional tests for error detection 
(chmod +x <test file name)- needed to run and test it
- Test1: freeAddressOutsideHeap.c
	- Creates an integer variable whose address is outside the bounds of our private memory heap, and attempts to deallocate the data. Our code recognizes this and will return with an error, stating that this code is attempting to free memory that was not malloced initially. 

- Test2: freeNonObject.c
	- Allocates 10 bytes of memory using our malloc function, and then attempts to free an address that is within the bounds of our memory heap, but is not an object as it points to the middle of the allocated chunk and not the start of the payload. Our code recognizes this and will return with an error, stating that this code is attempting to free memory that was not malloced intially. 

- Test3: moreMemThanAvailable.c
	- Allocates 100 bytes of memory, which an acceptable amount of memory to allocate. Then, it attempts to allocate 500k bytes, which should not work, as there is no chunk large enough to satisfy that amount of data. Our code recognizes this and will return with an error, stating that there is no chunk of unallocated memory, that matches the requested amount of bytes.

- Test4: nonAllocatedAddress.c
	- Allocates 4 bytes of memory, and stores the address in a pointer variable. The pointer is then passed to our free function, after which the code attempts to free this address, yet again. Our code recognizes this issue and will return with an error, stating that this code is attempting to free memory that has already been freed.

- Test5: tooMuchMemory.c
	- This simply includes an allocation of an amount of bytes that is more than the entire available memory. Our code wil recognize this and will return with an error, stating that there is no chunk of unallocated memory, that can hold the requested amount of bytes. 
